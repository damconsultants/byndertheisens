<?php

/**
 * the dam consultants Software.
 *
 * @category  the dam consultants
 * @package   DamConsultants_Bynder
 * @author    the dam consultants
 */

namespace DamConsultants\Bynder\Cron;

use Psr\Log\LoggerInterface;
use Magento\Catalog\Model\ProductRepository;
use Magento\Catalog\Model\ResourceModel\Eav\Attribute;
use Magento\Catalog\Model\Product\Action;
use Magento\Store\Model\StoreManagerInterface;
use DamConsultants\Bynder\Model\BynderFactory;

class DeleteFormMagento
{

	public function __construct(
		ProductRepository $productRepository,
		Attribute $attribute,
		Action $action,
		StoreManagerInterface $storeManagerInterface,
		\DamConsultants\Bynder\Helper\Data $DataHelper,
		\Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $collectionFactory,
		\DamConsultants\Bynder\Model\ResourceModel\Collection\MetaPropertyCollectionFactory $metaPropertyCollectionFactory,
		\DamConsultants\Bynder\Model\ResourceModel\Collection\BynderSycDataCollectionFactory $byndersycData,
		\Psr\Log\LoggerInterface $logger,
		BynderFactory $bynder
	) {
		$this->_productRepository = $productRepository;
		$this->attribute = $attribute;
		$this->action = $action;
		$this->datahelper = $DataHelper;
		$this->collectionFactory = $collectionFactory;
		$this->_byndersycData = $byndersycData;
		$this->metaPropertyCollectionFactory = $metaPropertyCollectionFactory;
		$this->storeManagerInterface = $storeManagerInterface;
		$this->bynder = $bynder;
		$this->_logger = $logger;
	}

	public function execute()
	{
		$this->_logger->info("Delete For Magento Side 1");

		$property_id = "";


		$collection = $this->_byndersycData->create()->addFieldToFilter('remove_for_magento', '0');

		/* $metaProperty_Collection = $this->metaPropertyCollectionFactory->create()->getData()[0]['property_id'];
		if(!empty($metaProperty_Collection)){
			$property_id = $metaProperty_Collection;
		}else{
			$property_id = " ";
		} */

		$metaProperty_Collection = $this->metaPropertyCollectionFactory->create()->getData();
        if (count($metaProperty_Collection) >= 1) {
            foreach ($collection as $key => $collection_value) {
                $collection_data_value[] = array(
                    'id' => $collection_value['id'],
                    'property_name' => $collection_value['property_name'],
                    'property_id' => $collection_value['property_id'],
                    'magento_attribute' => $collection_value['magento_attribute'],
                    'attribute_id' => $collection_value['attribute_id'],
                    'bynder_property_slug' => $collection_value['bynder_property_slug'],
                    'system_slug' => $collection_value['system_slug'],
                    'system_name' => $collection_value['system_name']
                );
                $collection_data_slug_val[$collection_value['system_slug']] = array(
                    'bynder_property_slug' => $collection_value['bynder_property_slug'],
                );
            }

        } else {
			$this->_logger->info('Please Select The Metaproperty First.....');
        }

		if (!empty($metaProperty_Collection)) {
			$data_collection = $collection->getData();
			foreach ($data_collection as $data_value) {
				$product_sku = $data_value['sku'];
				$media_id = $data_value['media_id'];
				$metaProperty_id = $property_id;
				$get_data = $this->datahelper->data_remove_for_magento($product_sku, $media_id,$collection_data_value);
				$this->_logger->info($get_data);
			}
		}




		return $this;
	}
}
